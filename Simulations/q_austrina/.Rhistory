#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
#saving the combined dataframe in .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R_scripts")
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
########################################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(parallel)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = TRUE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = FALSE
#allele category flag
#this flag allows code that runs the allele category code to be turned on
#when the flag is set to TRUE
allele_cat_flag = FALSE
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims_local\\Simulation_files"
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#number of species simulated
num_species = length(species_list)
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
}
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=1) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="", ".arp$"))
mclapply(arp_file_list,arp2gen,mc.cores=1) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulation_files"
setwd(mydir)
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="", ".arp$"))
mclapply(arp_file_list,arp2gen,mc.cores=1) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
for(scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="", ".arp$"))
mclapply(arp_file_list,arp2gen,mc.cores=1) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
}
for(scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="", ".arp$"))
mclapply(arp_file_list,arp2gen,mc.cores=1) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
for(scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="", ".arp$"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
#this deletes the arp files! DANGER!
#file.remove(arp_file_list)
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
}
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
}
else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
dir()
wd
########################################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(parallel)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = TRUE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = FALSE
#allele category flag
#this flag allows code that runs the allele category code to be turned on
#when the flag is set to TRUE
allele_cat_flag = FALSE
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#number of species simulated
num_species = length(species_list)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=='Windows') {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
} else if(.Platform$OS.type=='Unix') {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
########################################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(parallel)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = TRUE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = FALSE
#allele category flag
#this flag allows code that runs the allele category code to be turned on
#when the flag is set to TRUE
allele_cat_flag = FALSE
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#number of species simulated
num_species = length(species_list)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=='Windows') {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
} else if(.Platform$OS.type=='Unix') {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
########################################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
library(parallel)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = TRUE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = FALSE
#allele category flag
#this flag allows code that runs the allele category code to be turned on
#when the flag is set to TRUE
allele_cat_flag = FALSE
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#number of species simulated
num_species = length(species_list)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=='Windows') {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
} else if(.Platform$OS.type=='Unix') {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
.Platform$OS.type
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=="Windows") {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
} else if(.Platform$OS.type=="Unix") {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=="Windows") {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
}else if(.Platform$OS.type=="Unix") {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
#Set working directory
if(.Platform$OS.type=='Windows') {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=='Unix') {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
mydir
#Set working directory
if(.Platform$OS.type=="Windows") {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=="Unix") {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
mydir
.Platform$OS.type
#Set working directory
if(.Platform$OS.type=="Windows") {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=="unix") {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
mydir
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
#Set working directory
if(.Platform$OS.type=="Windows") {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=="unix") {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
mydir
.Platform$OS.type == "Windows"
.Platform$OS.type == "windows"
#Set working directory
if(.Platform$OS.type=="windows") {
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
} else if(.Platform$OS.type=="unix") {
mydir = "C:/Users/kayle/Documents/Quercus_IUCN_samp_sims/Simulations"
}
setwd(mydir)
mydir
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#number of species simulated
num_species = length(species_list)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(z in 1:length(temp_list_1)){temp_list_2[[z]]=arp2gen(temp_list_1[z])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
if(conversion_flag == TRUE) {
if(.Platform$OS.type=="windows") {
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
}else if(.Platform$OS.type=="unix") {
for (scen in 1:length(species_list)){
arp_file_list<-list.files(paste0(mydir,species_list[scen],sep="/"))
mclapply(arp_file_list,arp2gen,mc.cores=28) #could go higher than 28
}
}
}
#including file with useful functions written by Dr. Sean Hoban
source("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts\\Fa_sample_funcs.R")
##functions
colMax <- function(data) sapply(data, max, na.rm = TRUE)
sample.pop<-function(genind_obj,vect_pop_ID,vect_samp_sizes){
p<-length(vect_pop_ID)
if (p>1) {
for (p in 1:length(vect_pop_ID))
alleles[p,]<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)
alleles<-colSums(alleles)
} else {alleles<-colSums(genind_obj[[vect_pop_ID[p]]]@tab[sample(1:nrow(genind_obj[[vect_pop_ID[p]]]@tab), vect_samp_sizes[p]),],na.rm=T)}
alleles
}
