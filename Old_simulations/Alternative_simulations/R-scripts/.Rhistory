#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
upper_quartile = vector(length = num_species)
lower_quartile = vector(length = num_species)
rowMeans(final_quercus_results[,,i])
quantile(rowMeans(final_quercus_results[,,1]))
quartiles = vector(length = num_species)
for(i in 1:num_species) {
quartiles[i] = quantile(rowMeans(final_quercus_results[,,i]))
}
quartiles[1]
quartiles[[1]
]
quartiles = list(length = num_species)
quartiles = list(length = num_species)
for(i in 1:num_species) {
quartiles[[i]] = quantile(rowMeans(final_quercus_results[,,i]))
}
quartiles[[1]]
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(quartiles, file="quartiles_data.Rdata")
#defining a list to save the quartiles for each species
quartiles = list(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
quartiles[[i]] = quantile(rowMeans(final_quercus_results[,,i]))
quartiles[[i]]
}
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
quartiles[[i]] = quantile(rowMeans(final_quercus_results[,,i]))
print(quartiles[[i]])
}
save(quartiles, file="quartiles_data.Rdata")
#defining a list to save the quartiles for each species
quartiles = list(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
quartiles[[i]] = quantile(which(rowMeans(final_quercus_results[,,i])))
print(quartiles[[i]])
}
quartiles[[i]] = which(quantile(rowMeans(final_quercus_results[,,i])))
rownames(quantile(rowMeans(final_quercus_results[,,1])))
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
which(rowMeans(final_quercus_results[,,i])=0.9370414)
which(rowMeans(final_quercus_results[,,i])==0.9370414)
min(which(rowMeans(final_quercus_results[,,i])==0.9370414))
which(rowMeans(final_quercus_results[,,i])==0.9370414)
which(rowMeans(final_quercus_results[,,i])>=0.9370414)
min(which(rowMeans(final_quercus_results[,,i])>=0.9370414))
mean(final_quercus_results[126,,1])
which(rowMeans(final_quercus_results[,,1])==0.9370414)
which(rowMeans(final_quercus_results[,,1])=0.9370414)
which(rowMeans(final_quercus_results[,,1])==0.9370414)
which(all.equal(rowMeans(final_quercus_results[,,1]))0.9370414)
which(all.equal(rowMeans(final_quercus_results[,,1])),0.9370414)
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
print(lower_quartile[i])
}
quartiles(rowMeans(final_quercus_results[,,1]))
quantile(rowMeans(final_quercus_results[,,1]))
quantile(rowMeans(final_quercus_results[,,2]))
quantile(rowMeans(final_quercus_results[,,3]))
quantile(rowMeans(final_quercus_results[,,9]))
quantile(rowMeans(final_quercus_results[,,10]))
quantile(rowMeans(final_quercus_results[,,11]))
final_quercus_results[1,1,11]
final_quercus_results[100,1,11]
final_quercus_results[1,12,11]
min(which(rowMeans(final_quercus_results[,,1]))>lower_quartile[i])
min(which(rowMeans(final_quercus_results[,,1]))>=lower_quartile[i])
min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
rowMeans(final_quercus_results[295,,1])
final_quercus_results[295,,1]
mean(final_quercus_results[295,,1])
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile_row = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
upper_quartile_row
lower_quartile[1]
rowMeans(final_quercus_results[,,1])
upper_quartile[1]
i = 1
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
upper_quantile_row
upper_quartile_row
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
upper_quartile_row
i
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:length(num_species)) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:length(num_species)) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
1
i
i=1
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:length(num_species)) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,1])>=upper_quartile[i]))
}
lower_quartile_row
upper_quartile_row
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=upper_quartile[i]))
}
lower_quartile_row
upper_quartile_row
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=upper_quartile[i]))
}
lower_quartile
upper_quartile
upper_quartile_row
lower_quartile_row
upper_quartile_row
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
minSize
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
load("quercus_final_results.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Alternative_simulations\\R-scripts")
load("quercus_final_results.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
for(i in 1:num_species) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
minSize
#defining a list to save the quartiles for each species
lower_quartile = vector(length = num_species)
upper_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
i
i=1
#Loop to calculate quartiles for each species
for(i in 1:num_species) {
lower_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.25))
lower_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=lower_quartile[i]))
upper_quartile[i] = quantile(rowMeans(final_quercus_results[,,i]), probs = c(0.75))
upper_quartile_row[i] = min(which(rowMeans(final_quercus_results[,,i])>=upper_quartile[i]))
}
lower_quartile_row
upper_quartile_row
minSize
quantile(rowMeans(final_quercus_results[,,1]))
min(which(rowMeans(final_quercus_results[,,i]))>=0.95)
quantile((min(which(rowMeans(final_quercus_results[,,1])>0.95))))
upper_quartile = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
lower_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
quantile(final_quercus_results[,,1], probs = 0.75)
min(which(final_quercus_results[,,1])>=0.9942197)
min(which(rowMeans(final_quercus_results[,,1])>=0.9942197))
upper_quartile = vector(length = num_species)
upper_quartile_row = vector(length = num_species)
lower_quartile = vector(length = num_species)
lower_quartile_row = vector(length = num_species)
for(i in 1:num_species) {
data = rowMeans(final_quercus_results[,,i])
upper_quartile[i] = quantile(data, probs = 0.75)
upper_quartile_row[i] = min(which(data>=upper_quartile[i]))
}
upper_quartile_row
quantile(final_quercus_results[,,1])
quantile(rowMeans(final_quercus_results[,,1]))
min(which(rowMeans(final_quercus_results[,,1])>=0.9651379))
quantile(final_quercus_results[,,1])
rownames(quantile(final_quercus_results[,,1]))
quantile(rownames(final_quercus_results[,,1]))
quantile(final_quercus_results[,,1])
minSize
quantile(final_quercus_results[88,,1])
min(which(final_quercus_results[88,,1])>=0.9397590)
min(which(final_quercus_results[88,,1]>=0.9397590))
