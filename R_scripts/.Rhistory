#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
all_quercus_results[k,j,i] = sample_n_alleles/total_alleles
#saving the total alleles present across the populations for each species, and each replicate
total_alleles_all_quercus[k,j,i] = total_alleles
}else {
break
}
}
}
}
all_quercus_results
all_quercus_results[,,14]
#saving results to a .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(all_quercus_results, file="final_quercus_results.Rdata")
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
#converting results matrices to data frames
q_acerifolia_df = as.data.frame(all_quercus_results[,,1]) #making results array into a dataframe
q_acerifolia_df = rowMeans(q_acerifolia_df) #taking the means of the simulation replicates for cleaner plot
q_acerifolia_df = as.data.frame(q_acerifolia_df) #rowMeans takes it out of dataframe format, so we convert BACK to dataframe again
num_sampled = (1:500) #defining a column for sample size
q_acerifolia_df$num_sampled = num_sampled #adding column to dataframe
colnames(q_acerifolia_df) = c("avg_prop_all", "num_sampled") #changing column names
species = rep("Q. acerifolia", 500) #defing species name
q_acerifolia_df$species=species #adding column to dataframe
q_arkansana_df = as.data.frame(all_quercus_results[,,2])
q_arkansana_df = rowMeans(q_arkansana_df)
q_arkansana_df = as.data.frame(q_arkansana_df)
q_arkansana_df$num_sampled = num_sampled
colnames(q_arkansana_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. arkansana", 500)
q_arkansana_df$species = species
q_austrina_df = as.data.frame(all_quercus_results[,,3])
q_austrina_df = rowMeans(q_austrina_df)
q_austrina_df = as.data.frame(q_austrina_df)
q_austrina_df$num_sampled = num_sampled
colnames(q_austrina_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. austrina", 500)
q_austrina_df$species = species
q_boyntonii_df = as.data.frame(all_quercus_results[,,4])
q_boyntonii_df = rowMeans(q_boyntonii_df)
q_boyntonii_df = as.data.frame(q_boyntonii_df)
q_boyntonii_df$num_sampled = num_sampled
colnames(q_boyntonii_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. boyntonii", 500)
q_boyntonii_df$species=species
q_carmenesis_df = as.data.frame(all_quercus_results[,,5])
q_carmenesis_df = rowMeans(q_carmenesis_df)
q_carmenesis_df = as.data.frame(q_carmenesis_df)
q_carmenesis_df$num_sampled = num_sampled
colnames(q_carmenesis_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. carmenensis", 500)
q_carmenesis_df$species = species
q_cedrosensis_df = as.data.frame(all_quercus_results[,,6])
q_cedrosensis_df = rowMeans(q_cedrosensis_df)
q_cedrosensis_df = as.data.frame(q_cedrosensis_df)
q_cedrosensis_df$num_sampled = num_sampled
colnames(q_cedrosensis_df) =c("avg_prop_all", "num_sampled")
species = rep("Q. cedrosensis", 500)
q_cedrosensis_df$species = species
q_engelmannii_df = as.data.frame(all_quercus_results[,,7])#this was run and saved separately, so it's a different matrix I'm loading in
q_engelmannii_df = rowMeans(q_engelmannii_df)
q_engelmannii_df = as.data.frame(q_engelmannii_df)
q_engelmannii_df$num_sampled = num_sampled
colnames(q_engelmannii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. engelmannii", 500)
q_engelmannii_df$species = species
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("all_quercus_results.Rdata")
q_georgiana_df = as.data.frame(all_quercus_results[,,8])
q_georgiana_df = rowMeans(q_georgiana_df)
q_georgiana_df = as.data.frame(q_georgiana_df)
q_georgiana_df$num_sampled = num_sampled
colnames(q_georgiana_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. georgiana", 500)
q_georgiana_df$species = species
q_graciliformis_df = as.data.frame(all_quercus_results[,,9])
q_graciliformis_df = rowMeans(q_graciliformis_df)
q_graciliformis_df = as.data.frame(q_graciliformis_df)
q_graciliformis_df$num_sampled = num_sampled
colnames(q_graciliformis_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. graciliformis", 500)
q_graciliformis_df$species = species
q_harvardii_df = as.data.frame(all_quercus_results[,,10])
q_harvardii_df = rowMeans(q_harvardii_df)
q_harvardii_df = as.data.frame(q_harvardii_df)
q_harvardii_df$num_sampled = num_sampled
colnames(q_harvardii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. havardii", 500)
q_harvardii_df$species = species
q_hinckleyii_df = as.data.frame(all_quercus_results[,,11])
q_hinckleyii_df = rowMeans(q_hinckleyii_df)
q_hinckleyii_df = as.data.frame(q_hinckleyii_df)
q_hinckleyii_df$num_sampled = num_sampled
colnames(q_hinckleyii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. hinckleyii", 500)
q_hinckleyii_df$species = species
q_oglethorpensis_df = as.data.frame(all_quercus_results[,,12])
q_oglethorpensis_df = rowMeans(q_oglethorpensis_df)
q_oglethorpensis_df = as.data.frame(q_oglethorpensis_df)
q_oglethorpensis_df$num_sampled = num_sampled
colnames(q_oglethorpensis_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. oglethorpensis", 500)
q_oglethorpensis_df$species = species
q_pacifica_df = as.data.frame(all_quercus_results[,,13])
q_pacifica_df = rowMeans(q_pacifica_df)
q_pacifica_df = as.data.frame(q_pacifica_df)
q_pacifica_df$num_sampled = num_sampled
colnames(q_pacifica_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. pacifica", 500)
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
source('~/Quercus_IUCN_samp_sims/R_scripts/all_quercus_processing.R', echo=TRUE)
all_quercus_results
#saving results to a .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(all_quercus_results, file="final_quercus_results.Rdata")
#saving results to a .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(all_quercus_results, file="final_quercus_results.Rdata")
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
all_quercus_results[k,j,i] = sample_n_alleles/total_alleles
i
k
j
all_quercus_results
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#pre-defining the array to store results
#first dimension: 500, sampling from 1 to 500 individuals per species, saving results for each iteration
#second dimension: 100 for 100 simulation replicates per species
#third dimension: 14, for 14 quercus species. this is represented by the outer for loop (12 matrix 'slices')
final_quercus_results = array(0, dim = c(500,1000,14))
final_alleles_all_quercus = array(0, dim=c(500,1000,14))
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#pre-defining the array to store results
#first dimension: 500, sampling from 1 to 500 individuals per species, saving results for each iteration
#second dimension: 100 for 100 simulation replicates per species
#third dimension: 14, for 14 quercus species. this is represented by the outer for loop (12 matrix 'slices')
final_quercus_results = array(0, dim = c(500,1000,14))
final_alleles_all_quercus = array(0, dim=c(500,1000,14))
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(mydir,species_list[i],sep=""))
list_files = list.files(paste(mydir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:(length(list_files))) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(fst_flag == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
##and save results in a matrix for all species
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
final_quercus_results[k,j,i] = sample_n_alleles/total_alleles
#saving the total alleles present across the populations for each species, and each replicate
final_alleles_all_quercus[k,j,i] = total_alleles
}else {
break
}
}
}
}
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
source('~/Quercus_IUCN_samp_sims/R_scripts/all_quercus_processing.R', echo=TRUE)
#All quercus data prep for plotting
library(dplyr)
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
final_quercus_results
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("final_quercus_results.Rdata")
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
#FLAGS
#file conversion flag
#set to true once files have been converted once
#false if you want to convert files
conversion_flag = FALSE
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = FALSE
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims_local\\Simulation_files"
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
#pre-defining the array to store results
#first dimension: 500, sampling from 1 to 500 individuals per species, saving results for each iteration
#second dimension: 100 for 100 simulation replicates per species
#third dimension: 14, for 14 quercus species. this is represented by the outer for loop (12 matrix 'slices')
final_quercus_results = array(0, dim = c(500,1000,14))
final_alleles_all_quercus = array(0, dim=c(500,1000,14))
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(mydir,species_list[i],sep=""))
list_files = list.files(paste(mydir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:(length(list_files))) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(fst_flag == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
##and save results in a matrix for all species
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
final_quercus_results[k,j,i] = sample_n_alleles/total_alleles
#saving the total alleles present across the populations for each species, and each replicate
final_alleles_all_quercus[k,j,i] = total_alleles
}else {
break
}
}
}
}
#saving results to a .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(final_quercus_results, file="quercus_final_results.Rdata")
#All quercus data prep for plotting
library(dplyr)
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
source('~/Quercus_IUCN_samp_sims/R_scripts/all_quercus_processing.R', echo=TRUE)
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
#converting results matrices to data frames
q_acerifolia_df = as.data.frame(final_quercus_results[,,1]) #making results array into a dataframe
q_acerifolia_df = rowMeans(q_acerifolia_df) #taking the means of the simulation replicates for cleaner plot
q_acerifolia_df = as.data.frame(q_acerifolia_df) #rowMeans takes it out of dataframe format, so we convert BACK to dataframe again
num_sampled = (1:500) #defining a column for sample size
q_acerifolia_df$num_sampled = num_sampled #adding column to dataframe
colnames(q_acerifolia_df) = c("avg_prop_all", "num_sampled") #changing column names
species = rep("Q. acerifolia", 500) #defing species name
q_acerifolia_df$species=species #adding column to dataframe
q_arkansana_df = as.data.frame(final_quercus_results[,,2])
q_arkansana_df = rowMeans(q_arkansana_df)
q_arkansana_df = as.data.frame(q_arkansana_df)
q_arkansana_df$num_sampled = num_sampled
colnames(q_arkansana_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. arkansana", 500)
q_arkansana_df$species = species
q_austrina_df = as.data.frame(final_quercus_results[,,3])
q_austrina_df = rowMeans(q_austrina_df)
q_austrina_df = as.data.frame(q_austrina_df)
q_austrina_df$num_sampled = num_sampled
colnames(q_austrina_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. austrina", 500)
q_austrina_df$species = species
q_boyntonii_df = as.data.frame(final_quercus_results[,,4])
q_boyntonii_df = rowMeans(q_boyntonii_df)
q_boyntonii_df = as.data.frame(q_boyntonii_df)
q_boyntonii_df$num_sampled = num_sampled
colnames(q_boyntonii_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. boyntonii", 500)
q_boyntonii_df$species=species
q_carmenesis_df = as.data.frame(final_quercus_results[,,5])
q_carmenesis_df = rowMeans(q_carmenesis_df)
q_carmenesis_df = as.data.frame(q_carmenesis_df)
q_carmenesis_df$num_sampled = num_sampled
colnames(q_carmenesis_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. carmenensis", 500)
q_carmenesis_df$species = species
q_engelmannii_df = as.data.frame(final_quercus_results[,,7])
q_engelmannii_df = rowMeans(q_engelmannii_df)
q_engelmannii_df = as.data.frame(q_engelmannii_df)
q_engelmannii_df$num_sampled = num_sampled
colnames(q_engelmannii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. engelmannii", 500)
q_engelmannii_df$species = species
q_georgiana_df = as.data.frame(final_quercus_results[,,8])
q_georgiana_df = rowMeans(q_georgiana_df)
q_georgiana_df = as.data.frame(q_georgiana_df)
q_georgiana_df$num_sampled = num_sampled
colnames(q_georgiana_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. georgiana", 500)
q_georgiana_df$species = species
q_graciliformis_df = as.data.frame(final_quercus_results[,,9])
q_graciliformis_df = rowMeans(q_graciliformis_df)
q_graciliformis_df = as.data.frame(q_graciliformis_df)
q_graciliformis_df$num_sampled = num_sampled
colnames(q_graciliformis_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. graciliformis", 500)
q_graciliformis_df$species = species
q_harvardii_df = as.data.frame(final_quercus_results[,,10])
q_harvardii_df = rowMeans(q_harvardii_df)
q_harvardii_df = as.data.frame(q_harvardii_df)
q_harvardii_df$num_sampled = num_sampled
colnames(q_harvardii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. havardii", 500)
q_harvardii_df$species = species
q_hinckleyii_df = as.data.frame(final_quercus_results[,,11])
q_hinckleyii_df = rowMeans(q_hinckleyii_df)
q_hinckleyii_df = as.data.frame(q_hinckleyii_df)
q_hinckleyii_df$num_sampled = num_sampled
colnames(q_hinckleyii_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. hinckleyii", 500)
q_hinckleyii_df$species = species
q_oglethorpensis_df = as.data.frame(final_quercus_results[,,12])
q_oglethorpensis_df = rowMeans(q_oglethorpensis_df)
q_oglethorpensis_df = as.data.frame(q_oglethorpensis_df)
q_oglethorpensis_df$num_sampled = num_sampled
colnames(q_oglethorpensis_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. oglethorpensis", 500)
q_oglethorpensis_df$species = species
q_pacifica_df = as.data.frame(final_quercus_results[,,13])
q_pacifica_df = rowMeans(q_pacifica_df)
q_pacifica_df = as.data.frame(q_pacifica_df)
q_pacifica_df$num_sampled = num_sampled
colnames(q_pacifica_df) =  c("avg_prop_all", "num_sampled")
species = rep("Q. pacifica", 500)
q_pacifica_df$species = species
q_tomentella_df = as.data.frame(final_quercus_results[,,14])
q_tomentella_df = rowMeans(q_tomentella_df)
q_tomentella_df = as.data.frame(q_tomentella_df)
q_tomentella_df$num_sampled = num_sampled
colnames(q_tomentella_df) = c("avg_prop_all", "num_sampled")
species = rep("Q. tomentella", 500)
q_tomentella_df$species = species
#use rbind() to combined all vertically - it's going to be really large.
combined_quercus_new = rbind(q_acerifolia_df, q_arkansana_df, q_austrina_df, q_boyntonii_df, q_carmenesis_df, q_cedrosensis_df, q_engelmannii_df, q_georgiana_df, q_graciliformis_df, q_harvardii_df, q_hinckleyii_df, q_oglethorpensis_df, q_pacifica_df, q_tomentella_df)
#saving the combined dataframe in .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(combined_quercus_new, file="combined_quercus_final.Rdata")
#Script to plot results for Quercus sampling
library(ggplot2)
####################################################################################################
#GRAPHICS
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle("Genetic diversity captured for varying sample sizes across 12 oak species") +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle("Genetic diversity captured for varying sample sizes across 14 oak species") +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
q_acer_min = min(which(final_quercus_results[,,1]>0.95))
q_acer_min
q_ark_min = min(which(final_quercus_results[,,2]>0.95))
q_ark_min
q_aus_min = min(which(final_quercus_results[,,3]>0.95))
q_aus_min
q_boyn_min = min(which(final_quercus_results[,,4]>0.95))
q_boyn_min
q_carmen_min = min(which(final_quercus_results[,,5]>0.95))
q_carmen_min
q_cedro_min = min(which(final_quercus_results[,,6]>0.95))
q_cedro_min
minSize = vector(length=14)
minSize = vector(length=14)
for(i in 1:14) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
minSize
