<<<<<<< HEAD
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#using equation 3 to calculate S
for(i in 1:length(p)) {
S[i,j] = (r[i] + (1.645*sqrt(r[i])) + 0.5)/(p[i])
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[j])
}
}
#printing values of S
for(i in 1:6){
for(j in 1:6) {
print(S[i,j])
}
}
#make a table to display values
data.frame(p, r, S)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#defining variables with similar values to the table in Brown paper
p = c(0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.05)
#S = c(0, 0, 0, 0, 0, 0)
S = matrix(1:36, byrow = TRUE, nrow = 6)
r = c(1, 2, 4, 8, 10, 15)
#using equation 3 to calculate S
for(i in 1:length(p)) {
for(j in 1:length(r)) {
S[i,j] = (r[j] + (1.645*sqrt(r[j])) + 0.5)/(p[i])
}
}
#make a table to display values
data.frame(p, r, S)
S <- as.data.frame(S)
rownames(S) <- r
colnames(S) <- p
#change S to a data frame
S <- as.data.frame(S)
S
round(S)
q()
library(diveRsity)
library(adegenet)
#import functions
import_arp2gen_files = function(mypath, mypattern) {
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
import_gen2genind_objects = function(mypath, mypattern) {
temp_list_3 = list.files(mypath, mypattern)
temp_list_4 = list(length = length(temp_list_3))
for(j in 1:length(temp_list_3)){temp_list_4[[j]]=read.genepop(temp_list_3[j], ncode=3)}
temp_list_4
}
dir("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration")
files = list.files("C:\\Users\\kayle\\Documents\\Morton-REU\\practice\\Simulations\\simcoal2\\compare_migration", recursive = T, pattern = ".arp$")
files
files[[1]]
for(i in 1:length(files)) {
gen_files = list(arp2gen(files[[i]]))
}
files
hello_function()
hello_function = function() {
print("Hello world!")
}
hello_function()
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
myData = PlantGrowth
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
View(myData)
anova_results = aov(weight ~ group, data = myData)
summary.aov(anova_results)
int x = 2;
X
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
setwd(mydir)
#list holding the directories for all species
species_list = c("\\q_acerifolia")
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
i
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[i], ncode=3)
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
i
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[1]], ncode=3)
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
list_files
list_files[[1]]
list_files[1]
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
setwd(mydir)
#list holding the directories for all species
species_list = c("\\q_acerifolia")
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,species_list[x],sep=""),".arp$")
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[1]], ncode=3)
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
gen_files = list.files(mydir, pattern = ".gen$")
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(gen_files[[i]], ncode=3)
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(gen_files[[1]], ncode=3)
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
increment = 0.05
counter = 0
for(j in 1:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
}
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations"
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\Simulations\\q_acerifolia"
setwd(mydir)
#Defining an import function
#converts all arlequin files in a folder to genepop files
import_arp2gen_files = function(mypath, mypattern) {
setwd(mypath)
temp_list_1 = list.files(mypath, mypattern)
temp_list_2 = list(length = length(temp_list_1))
for(i in 1:length(temp_list_1)){temp_list_2[[i]]=arp2gen(temp_list_1[i])}
temp_list_2
}
#converting all simulation files from arlequin format to genepop format using defined import function
for(x in 1:length(species_list)) {
import_arp2gen_files(paste(mydir,sep=""),".arp$")
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
increment = 0.05
counter = 0
for(j in 1:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
}
sample_size
for(i in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
increment = 0.05
counter = 0
for(j in 1:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
counter += 1
}
}
increment = 0.05
counter = 0
for(j in 1:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
counter = counter + 1
}
sample_size
n
n
increment = 0.05
counter = 0
for(j in 1:21) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
counter = counter + 1
}
sample_size
increment = 0.05
for(j in 0:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
sample_size
increment = 0.05
for(j in 0:20) {
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
sample_size
sample_size = as.numeric(table(temp_genind@pop)*increment*1)
sample_size = ceiling(sample_size)
sample_size
sample_size = as.numeric(table(temp_genind@pop)*increment*0)
sample_size = ceiling(sample_size)
sample_size
increment = 0.05
for(j in 0:20) {
if(j == 0)
sample_size = c(1,1,1,1)
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
results_q_acerifolia = array(0, dim = c(1, 100))
i = 1
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
last_ind
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
first_ind
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
first_ind
increment = 0.05
j = 1
j= 0
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0)
sample_size = c(1,1,1,1)
j
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0)
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0) {
sample_size = c(1,1,1,1)
}
else {
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
sample_size
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
rows_to_samp
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
head(results_q_acerifolia)
results_q_acerifolia
results_q_acerifolia = array(0, dim = c(20, 100))
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
results_q_acerifolia
results_q_acerifolia[0,]
results_q_acerifolia[0,1]
results_q_acerifolia[1,1]
increment = 0.05
for(j in 0:20) {
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[(j+1),i] = sample_n_alleles/total_alleles
}
increment = 0.05
for(j in 0:20) {
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(j == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*j)
sample_size = ceiling(sample_size)
}
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
}
results_q_acerifolia
j = 0
increment = 0.05
counter = 0
j = 1
counter = 0
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(counter == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
sample_size
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
rows_to_samp
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
total_alleles
sample_n_alleles
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
results_q_acerifolia
results_q_acerifolia[1,]
results_q_acerifolia[,1]
sample_n_alleles
total_alleles
i
j
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
results_q_acerifolia[1,1]
results_q_acerifolia[2,1]
results_q_acerifolia[3,1]
results_q_acerifolia[4,1]
results_q_acerifolia[5,1]
sample_n_alleles = colSums(temp_genind@tab[rows_to_samp,])>0
sample_n_alleles
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
increment = 0.05
counter = 0
for(j in 1:20) {
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(counter == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
counter =  counter + 1
}
results_q_acerifolia
j = 2
j= 2
counter = 2
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(counter == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
sample_size
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
rows_to_samp
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
sample_n_alleles
total\
total_alleles
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
results_q_acerifolia[2,2]
sample_n_alleles/total_alleles
results_q_acerifolia
increment = 0.05
counter = 0
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
list_files = list.files(mydir, pattern = ".gen$")
for(i in 1:length(list_files)) {
increment = 0.05
counter = 0
for(j in 1:20) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[i]], ncode=3)
#defining population boundaries by the first individual and the last individuals in each population
#last individual for every population as the cumulative sum of all populations (ie., last individual for pop 1 is the sum of pop 1)
last_ind = as.numeric(cumsum(table(temp_genind@pop)))
#first individual of every population begins at 1, then for following populations, it is the last individual (cumulative sum) + 1
#for example, if the last individual for pop 1 is 30, the first individual for pop 2 would be 31
first_ind = as.numeric(c(1, cumsum(table(temp_genind@pop)) +1))
#selecting the first 4 values since we have 4 populations
first_ind = first_ind[1:4]
#for the first iteration, we don't want to sample 0, we just want to sample 1
if(counter == 0) {
sample_size = c(1,1,1,1)
} else {
sample_size = as.numeric(table(temp_genind@pop)*increment*counter)
sample_size = ceiling(sample_size)
}
rows_to_samp = c(sample(first_ind[1]:last_ind[1], sample_size[1]), sample(first_ind[2]:last_ind[2], sample_size[2]), sample(first_ind[3]:last_ind[3], sample_size[3]), sample(first_ind[4]:last_ind[4], sample_size[4]))
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
total_alleles = ncol(temp_genind@tab)
results_q_acerifolia[j,i] = sample_n_alleles/total_alleles
counter =  counter + 1
}
}
results_q_acerifolia
results_q_acerifolia[1,]
results_q_acerifolia[,1]
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(results_q_acerifolia, file="q_acerifolia_results.Rdata")
=======
load("q_acerifolia_results.Rdata")
results_q_acerifolia
results_q_acerifolia[,1]
>>>>>>> 8ded2c9bdad5d355a83812820d3e8ddc193e02a8
