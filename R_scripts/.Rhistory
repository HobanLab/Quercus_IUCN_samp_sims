####################################################################################################
#library functions
library(ggplot2)
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
load("new_fst.Rdata")
fst_results
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results[j,] = rowMeans(mean_max_min_fst[,,j])
}
fst_results
save(fst_results, file="fst_processed.Rdata")
save(minSize, file="min_samp_size.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=14)
for(i in 1:14) {
minSize[i] = (min(which(rowMeans(final_quercus_results[,,i])>0.95)))
}
save(minSize, file="min_samp_size.Rdata")
#load in sampling data and Fst data
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
load("min_samp_size.Rdata")
load("fst_processed.Rdata")
minSize
fst_results
mean_fst_results = fst_results[,1]
mean_fst_results
library(tidyverse)
mean_fst_results = as.data.frame(mean_fst_results)
minSize = as.data.frame(minSize)
minSize
mean_fst_results
merge(minSize, mean_fst_results)
data.frame(minSize, mean_fst_results)
min_size_vs_fst = data.frame(minSize, mean_fst_results)
min_size_vs_fst
ggplot(min_size_vs_fst, aes(minSize, mean_fst_results)) +
geom_point() +
stat_smooth(method=lm)
popSizes = array(14,1)
popSizes = c(530, 3460, 540, 1035, 3000, 8400, 20000, 500, 325, 5150, 300, 1000, 13000, 10500)
popSizes
popSizes = as.data.frame(popSizes)
min_size_vs_pop_size = data.frame(minSize, popSizes)
min_size_vs_pop_size
ggplot(min_size_vs_fst, aes(mean_fst_results, minSize)) +
geom_point() +
stat_smooth(method=lm)
ggplot(min_size_vs_pop_size, aes(popSizes, minSize)) +
geom_point() +
stat_smooth(method=lm)
numPops = array(14,1)
numPops = c(4, 10, 9, 8, 3, 10, 4, 5, 3, 10, 4, 5, 3, 4)
numPops = as.data.frame(numPops)
min_size_vs_num_pops = data.frame(minSize, numPops)
#plotting results
ggplot(min_size_vs_num_pops, aes(numPops, minSize)) +
geom_point() +
stat_smooth(method=lm)
mean_fst_results
minSize
#plotting results
#x axis -> mean Fst
#y axis -> minimum sample size required to capture 95% diversity
ggplot(min_size_vs_fst, aes(mean_fst_results, minSize)) +
geom_point() +
stat_smooth(method=lm) +
title("Min size vs. Fst")
#plotting results
#x axis -> mean Fst
#y axis -> minimum sample size required to capture 95% diversity
ggplot(min_size_vs_fst, aes(mean_fst_results, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. Fst")
#plotting results
ggplot(min_size_vs_pop_size, aes(popSizes, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. total pop. size")
#plotting results
ggplot(min_size_vs_num_pops, aes(numPops, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. number of pops.")
fst_model = lm(minSize ~ mean_fst_results, data = min_size_vs_fst)
summary(fst_model)
#plotting results of the regression
#x axis -> mean Fst
#y axis -> minimum sample size required to capture 95% diversity
ggplot(min_size_vs_fst, aes(mean_fst_results, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. Fst")
pop_size_model = lm(minSize ~ popSizes, data = min_size_vs_pop_size)
#plotting results
ggplot(min_size_vs_pop_size, aes(popSizes, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. total pop. size")
summary(pop_size_model)
#plotting results
ggplot(min_size_vs_num_pops, aes(numPops, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. number of pops.")
num_pops_model = lm(minSize ~ numPops, data = min_size_vs_num_pops)
summary(num_pops_model)
num_species = 14
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
num_species = 14
#Loop to get the minimum sample size required to capture 95% of the alleles
#in 'wild' populations for each species
#averaging each row, which represents all 1000 replicates (so we are averaging across replicates)
minSize = vector(length=num_species)
View(final_quercus_results)
rowMeans(final_quercus_results[50,,1])
rowMeans(final_quercus_results[50,,i])
i=1
rowMeans(final_quercus_results[50,,i])
rowMeans(final_quercus_results[50,,])
final_quercus_results[50,,]
final_quercus_results[50,,1]
mean(final_quercus_results[50,,1])
##########################################################################################################
#Proportion captured in sample size of 50
prop_captured = vector(length=num_species)
for(i in 1:num_species) {
prop_captured = mean(final_quercus_results[50,,i])
}
prop_captured
##########################################################################################################
#Proportion captured in sample size of 50
prop_captured = vector(length=num_species)
for(i in 1:num_species) {
prop_captured[i] = mean(final_quercus_results[50,,i])
}
prop_captured
save(prop_captured, file="prop_captured.Rdata")
load("prop_captured.Rdata")
#
prop_captured_n_50 = array(14,1)
#
prop_captured_n_50 = prop_captured
prop_captured
#
prop_captured = as.data.frame(prop_captured)
#combining data frames
prop_capt_vs_fst = data.frame(prop_captured, mean_fst_results)
####################################################################################################
#library functions
library(ggplot2)
#load in sampling data, Fst data, and minimum sample size data
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_final.Rdata")
load("min_samp_size.Rdata")
load("fst_processed.Rdata")
load("prop_captured.Rdata")
#using only the mean Fst to plot
mean_fst_results = fst_results[,1]
#converting to dataframes
mean_fst_results = as.data.frame(mean_fst_results)
minSize = as.data.frame(minSize)
#merging dataframes for plotting
min_size_vs_fst = data.frame(minSize, mean_fst_results)
#making the linear model
fst_model = lm(minSize ~ mean_fst_results, data = min_size_vs_fst)
summary(fst_model)
#plotting results of the regression
#x axis -> mean Fst
#y axis -> minimum sample size required to capture 95% diversity
ggplot(min_size_vs_fst, aes(mean_fst_results, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. Fst")
#defining the sizes of the populations used for each species simulation
popSizes = array(14,1)
popSizes = c(530, 3460, 540, 1035, 3000, 8400, 20000, 500, 325, 5150, 300, 1000, 13000, 10500)
popSizes = as.data.frame(popSizes)
#combining the dataframes of min size. and pop sizes for plotting
min_size_vs_pop_size = data.frame(minSize, popSizes)
pop_size_model = lm(minSize ~ popSizes, data = min_size_vs_pop_size)
summary(pop_size_model)
#plotting results
ggplot(min_size_vs_pop_size, aes(popSizes, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. total pop. size")
numPops = array(14,1)
numPops = c(4, 10, 9, 8, 3, 10, 4, 5, 3, 10, 4, 5, 3, 4)
numPops = as.data.frame(numPops)
min_size_vs_num_pops = data.frame(minSize, numPops)
num_pops_model = lm(minSize ~ numPops, data = min_size_vs_num_pops)
summary(num_pops_model)
#plotting results
ggplot(min_size_vs_num_pops, aes(numPops, minSize)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Min size vs. number of pops.")
prop_captured = as.data.frame(prop_captured)
#combining data frames
prop_capt_vs_fst = data.frame(prop_captured, mean_fst_results)
prop_capt_vs_fst
ggplot(prop_capt_vs_fst, aes(mean_fst_results, prop_captured)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Prop. of alleles captured in n=50 vs. Fst")
fst_prop_capt_model = lm(prop_captured ~ mean_fst_results, data = prop_capt_vs_fst)
summary(fst_prop_capt_model)
prop_capt_vs_pop_size = data.frame(prop_captured, popSizes)
prop_capt_vs_pop_size = data.frame(prop_captured, popSizes)
pop_size_prop_capt_model = lm(prop_captured ~ popSizes, data = prop_capt_vs_pop_size)
summary(pop_size_prop_capt_model)
ggplot(prop_capt_vs_pop_size, aes(popSizes, prop_captured)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Prop. of alleles captured in n=50 vs. Total population size")
#####################################################################################################
#prop captured in n=50 vs. number of populations
prop_capt_vs_num_pops = data.frame(prop_captured, numPops)
prop_capt_num_pops_model = lm(prop_captured ~ numPops, data = prop_capt_vs_num_pops)
summary(prop_capt_num_pops_model)
#####################################################################################################
#prop captured in n=50 vs. number of populations
prop_capt_vs_num_pops = data.frame(prop_captured, numPops)
prop_capt_num_pops_model = lm(prop_captured ~ numPops, data = prop_capt_vs_num_pops)
summary(prop_capt_num_pops_model)
ggplot(prop_capt_vs_num_pops, aes(numPops, prop_captured)) +
geom_point() +
stat_smooth(method=lm) +
ggtitle("Prop. of alleles captured in n=50 vs. Number of populations")
