fst_results = array(0, dim = c(14,3))
fst_results
#Q. acerifolia - low migration, small pops
q_acer_fst = rowMeans(mean_max_min_fst[,,1]) #averaging across replicates
q_acer_fst
#load in data from all_quercus_sampling.R
load("mean_min_max_fst_new.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
#load in data from all_quercus_sampling.R
load("mean_min_max_fst_new.Rdata")
fst_results = array(0, dim = c(14,3))
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
#Q. acerifolia - low migration, small pops
q_acer_fst = rowMeans(mean_max_min_fst[,,1]) #averaging across replicates
q_acer_fst
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results = rowMeans(mean_max_min_fst[,,j])
}
j
fst_results
j=1
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results = rowMeans(mean_max_min_fst[,,j])
}
fst_results
fst_results = array(0, dim = c(14,3))
fst_results
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results = rowMeans(mean_max_min_fst[,,j])
}
j
########################################################################################################
#Library functions
library(adegenet)
library(car)
library(diveRsity)
library(ggplot2)
library(ggpubr)
library(ggsignif)
library(tidyr)
library(hierfstat)
#Fst flag
#Fst code adds a lot of time to run the code
#so if you don't want to run it, keep Fst off by setting it FALSE
fst_flag = TRUE
#Set working directory
mydir = "C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims_local\\Simulation_files"
setwd(mydir)
#creating a list of the species we have simulated
species_list = c("\\q_acerifolia",
"\\q_arkansana",
"\\q_austrina",
"\\q_boyntonii",
"\\q_carmenensis",
"\\q_cedrosensis",
"\\q_engelmannii",
"\\q_georgiana",
"\\q_graciliformis",
"\\q_havardii",
"\\q_hinckleyii",
"\\q_oglethorpensis",
"\\q_pacifica",
"\\q_tomentella")
#defining the maximum number of individuals we want to sample
#for practical purposes, this will be 500 indivduals
max_sample_size = 500
#number of replicates of genetic simulation
num_replicates = 1000
##min, max, mean of replicates
mean_max_min_fst = array(dim = c(3,100,14))#Fst run on 100 replicates
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(mydir,species_list[i],sep=""))
list_files = list.files(paste(mydir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:(length(list_files))) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(fst_flag == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
##and save results in a matrix for all species
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#final_quercus_results[k,j,i] = sample_n_alleles/total_alleles #UNCOMMENT
#saving the total alleles present across the populations for each species, and each replicate
#final_alleles_all_quercus[k,j,i] = total_alleles #UNCOMMENT
}else {
break
}
}
}
}
#storing Fst results
#saving a list of genind objects created
temp_genind_list <- list()
#list of hierfstat
temp_hierfstat <- list()
##min, max, mean of replicates
mean_max_min_fst = array(dim = c(3,100,14))#Fst run on 100 replicates
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(mydir,species_list[i],sep=""))
list_files = list.files(paste(mydir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:(length(list_files))) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(fst_flag == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
##and save results in a matrix for all species
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#final_quercus_results[k,j,i] = sample_n_alleles/total_alleles #UNCOMMENT
#saving the total alleles present across the populations for each species, and each replicate
#final_alleles_all_quercus[k,j,i] = total_alleles #UNCOMMENT
}else {
break
}
}
}
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(mydir,species_list[i],sep=""))
list_files = list.files(paste(mydir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:100) { #(length(list_files))
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(fst_flag == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
##and save results in a matrix for all species
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
# for(k in 1:max_sample_size) {
#
#   #this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#   #the loop will break if k is greater than the total pop. size
#   #in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
#   if(k <= sum(table(temp_genind@pop))) {
#     #choosing which rows of the matrix to sample from
#     #rows indicate individuals
#     rows_to_samp = sample(first_ind:last_ind, k)
#
#     #saving the alleles sampled
#     if(k == 1) {
#       sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
#     } else {
#       sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
#     }
#
#     #calculating the total alleles
#     total_alleles = ncol(temp_genind@tab)
#
#     #saving the proportion of alleles captured -> alleles sampled/total alleles
#     #represents genetic conservation success
#     final_quercus_results[k,j,i] = sample_n_alleles/total_alleles
#
#     #saving the total alleles present across the populations for each species, and each replicate
#     final_alleles_all_quercus[k,j,i] = total_alleles
# }else {
#   break
# }
}
}
species_names = c("Q. acerifolia", "Q. arksanana", "Q. austrina", "Q. boyntonnii", "Q. carmenensis", "Q. cedrosensis", "Q. engelmannii", "Q. georgiana",
"Q. graciliformis", "Q. havardii", "Q. hinckleyii", "Q. oglethorpensis", "Q. pacifica", "Q. tomentella")
col_names = c("avg_prop_all", "num_sampled")
#saving results to a .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
#save(final_quercus_results, file="quercus_final_results.Rdata")
save(mean_max_min_fst, file="new_fst.Rdata")
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
#load in data from all_quercus_sampling.R
load("new_fst.Rdata")
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results = rowMeans(mean_max_min_fst[,,j])
}
fst_results
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results[i,] = rowMeans(mean_max_min_fst[,,j])
}
fst_results
i
i=1
#creating an array to store all Fst results in
#dimensions 14 (14 species) by 3 (first column is mean Fst, second column is min Fst, third column is max Fst)
fst_results = array(0, dim = c(14,3))
for(j in 1:14) {
fst_results[j,] = rowMeans(mean_max_min_fst[,,j])
}
fst_results
#################################################################################################
#Library functions
library(dplyr)
#Loading in results from all_quercus_sampling.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("quercus_final_results.Rdata")
species_names = c("Q. acerifolia", "Q. arksanana", "Q. austrina", "Q. boyntonnii", "Q. carmenensis", "Q. cedrosensis", "Q. engelmannii", "Q. georgiana",
"Q. graciliformis", "Q. havardii", "Q. hinckleyii", "Q. oglethorpensis", "Q. pacifica", "Q. tomentella")
num_sampled = (1:500)
col_names = c("avg_prop_all", "num_sampled")
for(i in 1:length(species_names)) {
temp_data_frame = as.data.frame(final_quercus_results[,,i]) #creating a temporary data frame to hold the current
temp_data_frame = rowMeans(temp_data_frame) #taking means of simulation replicates for a cleaner plot
temp_data_frame = as.data.frame(temp_data_frame) # rowMeans takes it out of dataframe format so converting back to dataframe
temp_data_frame$num_sampled = num_sampled #defining a column of the sample size
colnames(temp_data_frame) = col_names #setting the column names
species = rep(species_names[i], 500) #creating a new column with the species names
temp_data_frame$species = species #setting the new columns values
combined_quercus_new = rbind(temp_data_frame) #adding temp data frame to larger dataframe - Not sure if this will work ***
}
combined_quercus_new
combined_quercus_list = list()
species_names = c("Q. acerifolia", "Q. arksanana", "Q. austrina", "Q. boyntonnii", "Q. carmenensis", "Q. cedrosensis", "Q. engelmannii", "Q. georgiana",
"Q. graciliformis", "Q. havardii", "Q. hinckleyii", "Q. oglethorpensis", "Q. pacifica", "Q. tomentella")
num_sampled = (1:500)
col_names = c("avg_prop_all", "num_sampled")
combined_quercus_list = list()
for(i in 1:length(species_names)) {
temp_data_frame = as.data.frame(final_quercus_results[,,i]) #creating a temporary data frame to hold the current
temp_data_frame = rowMeans(temp_data_frame) #taking means of simulation replicates for a cleaner plot
temp_data_frame = as.data.frame(temp_data_frame) # rowMeans takes it out of dataframe format so converting back to dataframe
temp_data_frame$num_sampled = num_sampled #defining a column of the sample size
colnames(temp_data_frame) = col_names #setting the column names
species = rep(species_names[i], 500) #creating a new column with the species names
temp_data_frame$species = species #setting the new columns values
combined_quercus_list[i] = temp_data_frame
}
combined_quercus_new = do.call(rbind, combined_quercus_list)
combined_quercus_new
View(combined_quercus_new)
species_names = c("Q. acerifolia", "Q. arksanana", "Q. austrina", "Q. boyntonnii", "Q. carmenensis", "Q. cedrosensis", "Q. engelmannii", "Q. georgiana",
"Q. graciliformis", "Q. havardii", "Q. hinckleyii", "Q. oglethorpensis", "Q. pacifica", "Q. tomentella")
num_sampled = (1:500)
col_names = c("avg_prop_all", "num_sampled")
combined_quercus_list = list()
for(i in 1:length(species_names)) {
temp_data_frame = as.data.frame(final_quercus_results[,,i]) #creating a temporary data frame to hold the current
temp_data_frame = rowMeans(temp_data_frame) #taking means of simulation replicates for a cleaner plot
temp_data_frame = as.data.frame(temp_data_frame) # rowMeans takes it out of dataframe format so converting back to dataframe
temp_data_frame$num_sampled = num_sampled #defining a column of the sample size
colnames(temp_data_frame) = col_names #setting the column names
species = rep(species_names[i], 500) #creating a new column with the species names
temp_data_frame$species = species #setting the new columns values
combined_quercus_list[[i]] = temp_data_frame
}
combined_quercus_new = do.call(rbind, combined_quercus_list)
View(combined_quercus_new)
#saving the combined dataframe in .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(combined_quercus_new, file="combined_quercus_edit.Rdata")
####################################################################################################
#library functions
library(ggplot2)
#load in data from all_quercus_processing.R
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
load("combined_quercus_edit.Rdata")
#plot containing all oak species
#number sampled on x axis
#proportion of alleles on y axis
#
ggplot(data=combined_quercus_new, aes(x=num_sampled, y=avg_prop_all, color=species)) +
geom_line(size=1,aes(linetype=species)) +
scale_linetype_manual(values=c("solid", "dotted", "longdash", "solid", "twodash", "dotted", "solid", "longdash", "solid", "dotdash", "solid", "dotted", "solid", "longdash")) +
ylim(0.7,1) +
xlim(0,400) +
ggtitle("Genetic diversity captured for varying sample sizes across 14 oak species") +
xlab("Number of unique individuals sampled") +
ylab("Proportion of alleles captured") +
labs(fill = "Species") +
theme(text = element_text(size=15)) +
theme_bw() #white background
#saving the combined dataframe in .Rdata file
setwd("C:\\Users\\kayle\\Documents\\Quercus_IUCN_samp_sims\\R_scripts")
save(combined_quercus_new, file="combined_quercus_final.Rdata")
