require(dplyr)
require(tidyr)
require(ggplot2)
require(gridExtra)
require(ggthemes)
require(emmeans)
setwd("Quercus_IUCN_samp_sims/")
# READ AND RESTRUCTURE DATA ---------------------------------------------------
load('R-scripts/quercus_num_alleles_capt_orig.RData')
capt_orig <- alleles_capt_all_quercus
load('R-scripts/quercus_num_alleles_capt_alt.RData')
capt_alt <- alleles_capt_all_quercus
load('R-scripts/quercus_total_alleles_orig.RData')
total_orig <- final_alleles_all_quercus
load('R-scripts/quercus_total_alleles_alt.RData')
total_alt <- final_alleles_all_quercus
taxa <- read.csv('Figures_tables/all_existing_by_sp_df.csv', stringsAsFactors = FALSE)
taxa <- as.vector(taxa$X)
rm(alleles_capt_all_quercus, final_alleles_all_quercus)
# ORIGINAL SIMULATION PARAMETERS
# create df of number of alleles captured
n_samples <- dim(capt_orig)[1]
n_species <- dim(capt_orig)[3]
n_iter <- dim(capt_orig)[2]
captured_list <- list()
for(i in 1:n_species){
captured_list[[i]] <- as.data.frame(t(capt_orig[,,i]))
captured_list[[i]] <- pivot_longer(captured_list[[i]],
cols = 1:ncol(captured_list[[i]]),
names_to = 'n_samp',
values_to = 'n_capt')
captured_list[[i]]$n_samp <- as.numeric(sub('.', '', captured_list[[i]]$n_samp))
captured_list[[i]]$taxon <- taxa[i]
}
captured_df <- bind_rows(captured_list)
# create df of total number of alleles
total_list <- list()
for(i in 1:n_species){
total_list[[i]] <- as.data.frame(t(total_orig[,,i]))
total_list[[i]] <- pivot_longer(total_list[[i]],
cols = 1:ncol(total_list[[i]]),
names_to = 'n_samp',
values_to = 'n_total')
total_list[[i]]$n_samp <- as.numeric(sub('.', '', total_list[[i]]$n_samp))
total_list[[i]]$taxon <- taxa[i]
}
total_df <- bind_rows(total_list)
# bind dfs together (my computer won't let me use left_join b/c of space issues)
# so checking to see if columns match, and if so, then doing cbind
identical(total_df[,c(1,3)], captured_df[,c(1,3)])
df <- cbind(captured_df, total_df[,'n_total'])
df$fail <- df$n_total - df$n_capt
# ALTERNATIVE SIMULATION PARAMETERS
# create df of number of alleles captured
captured_list <- list()
for(i in 1:n_species){
captured_list[[i]] <- as.data.frame(t(capt_alt[,,i]))
captured_list[[i]] <- pivot_longer(captured_list[[i]],
cols = 1:ncol(captured_list[[i]]),
names_to = 'n_samp',
values_to = 'n_capt')
captured_list[[i]]$n_samp <- as.numeric(sub('.', '', captured_list[[i]]$n_samp))
captured_list[[i]]$taxon <- taxa[i]
}
captured_df <- bind_rows(captured_list)
# create df of total number of alleles
total_list <- list()
for(i in 1:n_species){
total_list[[i]] <- as.data.frame(t(total_alt[,,i]))
total_list[[i]] <- pivot_longer(total_list[[i]],
cols = 1:ncol(total_list[[i]]),
names_to = 'n_samp',
values_to = 'n_total')
total_list[[i]]$n_samp <- as.numeric(sub('.', '', total_list[[i]]$n_samp))
total_list[[i]]$taxon <- taxa[i]
}
total_df <- bind_rows(total_list)
# bind dfs together
identical(total_df[,c(1,3)], captured_df[,c(1,3)])
df_alt <- cbind(captured_df, total_df[,'n_total'])
df_alt$fail <- df_alt$n_total - df_alt$n_capt
# bind original and alt dfs together
df$type <- 'orig'
df_alt$type <- 'alt'
df_all <- rbind(df, df_alt)
# there are zeros for n_total and n_capt for two species (qugr, quhi)
# because they have small population sizes, so when n_samp
# exceeds their pop size, n_total (and n_capt) becomes 0. there are no
# observations where n_total is not zero but n_capt is zero, so can replace
# all zeros in n_total and n_capt with NAs. Then replace # fail with NA if
# n_total (or n_capt) is zero.
df$n_total <- ifelse(df$n_total == 0, NA, df$n_total)
df$n_capt <- ifelse(df$n_capt == 0, NA, df$n_capt)
df$fail <- ifelse(is.na(df$n_total), NA, df$fail)
saveRDS(df_all, 'RL_oaks_GLM_df_V2.RDS')
df <- readRDS('RL_oaks_GLM_df_V2.RDS')
# RUN MODEL --------------------------------------------------------------------
y <- as.matrix(df[,c('n_capt','fail')])
View(df)
View(y)
